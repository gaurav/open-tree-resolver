/*
 * Store module for keeping track of the phyloreferences loaded, and for loading
 * additional phyloreferences.
 */

import Vue from 'vue';
import { has, isEqual } from 'lodash';

function addPhyloref(state, phyloref) {
  // Check to make sure this phyloref hasn't already been added.
  if(state.loaded.find(phy => isEqual(phy, phyloref)) !== undefined) return;

  // No previous match? Then add it in!
  state.loaded.push(phyloref);
}

function extractPhyloreferencesFromJSONLD(state, jsonld) {
  // Extract phyloreferences from the provided JSONLD file and add them to
  // state.loaded. We use isEqual to prevent adding the same phyloreference
  // more than once, but we will add different phyloreferences with the
  // same '@id'.

  // JSON-LD files sometimes contain an array of elements. In this case,
  // we should try adding every one.
  if(Array.isArray(jsonld)) {
    jsonld.forEach(element => extractPhyloreferencesFromJSONLD(state, element));
  }

  // If this was generated by the Authoring Tool, then we can find phyloreferences
  // just by looking for jsonld.phylorefs.
  if(has(jsonld, 'phylorefs') && Array.isArray(jsonld.phylorefs)) {
    jsonld.phylorefs.forEach(phy => addPhyloref(state, phy));
  }
}

export default {
  state: {
    loaded: [], // Phyloref objects currently loaded.
  },
  mutations: {
    extractPhyloreferencesFromJSONLD
  }
};
